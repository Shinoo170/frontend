import React, { useState, useEffect, useRef } from 'react'
import Head from 'next/head'
import axios from 'axios'
import Image from 'next/image'
import Link from 'next/link'
import Header from 'components/header'
import styles from './cart.module.css'

import { RiArrowDownSLine } from 'react-icons/ri'
import { CgClose } from 'react-icons/cg'

export default function Cart(){
    const [ cart, setCart ] = useState([])
    const [ product, setProduct ] = useState([])
    const [ priceSummary, setPriceSummary ] = useState(0)
    const [ currency, setCurrency ] = useState('บาท')
    const [ exchange_rate, set_exchange_rate] = useState(1)
    const amount = [1,2,3,4,5,6,7,8,9,10]
    const url = process.env.NEXT_PUBLIC_BACKEND + '/user/cart'

    const getCart = () => {
        const jwt = localStorage.getItem('jwt')
        axios.get(url, {
            headers: {
                jwt
            }
        })
        .then( result => {
            var userCart = result.data.userCartData
            var product = result.data.product
            var cartList = []
            userCart.forEach((element, index) => {
                for(let i=0; i<product.length; i++){
                    if(element.productId === product[i].productId){
                        const result = Object.assign({}, element, product[i])
                        result.amount = element.amount
                        result.stockAmount = product[i].amount
                        cartList.push(result)
                    }
                }
            })
            setCart(cartList)
            setProduct(product)
        }).catch( err => {
            console.log(err)
        })
    }

    const editCartHandle = (productId, amount) => {
        const jwt = localStorage.getItem('jwt')
        axios.put(url, {
            jwt,
            productId,
            amount,
        }).then(result => {
            var userCart = result.data.currentCart.list
            var cartList = []
            userCart.forEach((element, index) => {
                for(let i=0; i<product.length; i++){
                    if(element.productId === product[i].productId){
                        const result = Object.assign({}, element, product[i])
                        result.amount = element.amount
                        result.stockAmount = product[i].amount
                        cartList.push(result)
                    }
                }
            })
            setCart(cartList)
        }).catch(err => console.log(err.message))
    }

    const removeItemInCart = (productId) => {
        const jwt = localStorage.getItem('jwt')
        axios.patch(url, {
            jwt,
            productId
        }).then(result => {
            getCart()
        }).catch(err => console.log(err.message))
    }

    useEffect(() => {
        calPriceSummary()
    },[cart])

    useEffect(() => {
        // update exchange rate every 20 sec
        if(currency === 'BUSD' ){
            const local_exchange_rate = JSON.parse(localStorage.getItem('exchange-rate'))
            if(!local_exchange_rate || local_exchange_rate.lastUpdate + 20*60*1000 < Date.now()){
                const USD_rate_url = process.env.NEXT_PUBLIC_BACKEND + '/util/exchangeRate/USDTHB'
                axios.get(USD_rate_url)
                .then( result => {
                    set_exchange_rate(result.data.rate)
                    localStorage.setItem('exchange-rate', JSON.stringify(result.data) )
                })
            }else {
                set_exchange_rate(local_exchange_rate.rate)
            }
        } else {
            set_exchange_rate(1)
        }
    }, [currency])

    useEffect(()=> {
        calPriceSummary()
    }, [exchange_rate])

    const calPriceSummary = () => {
        var priceSum = 0
        var itemPrice = 0
        cart.forEach( (element, index) => {
            itemPrice = element.amount * element.price / exchange_rate
            priceSum += Math.round(itemPrice*100)/100
        })
        setPriceSummary(Math.round(priceSum*100)/100)
    }

    const changeCurrencyHandle = (c) => {
        if(currency !== c){
            setCurrency(c)
        }
    }

    useEffect(()=> {
        getCart()
    },[])
    
    return (
        <div>
            <Head>
                <title>Cart | PT Bookstore</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header />
            <div className={styles.container}>
                <main className={styles.main}>
                    <div className={styles.cartSection}>
                        <div className={styles.label}>รายการสินค้า</div>
                        <hr />
                        <div className={styles.list}>
                            {
                                cart.map( (element, index) => {
                                    var itemPrice = element.amount * element.price / exchange_rate
                                    var priceSum = Math.round(itemPrice*100)/100
                                    const mouseUpHandle = (e) => {
                                        const container = document.getElementById(`cart-item-dropdown-${index}`)
                                        if (!container.contains(e.target)) {
                                            container.classList.remove(styles.showDropdown)
                                            document.removeEventListener('mouseup', mouseUpHandle)
                                        }
                                    }
                                    const showDropdownHandle = () => {
                                        const container = document.getElementById(`cart-item-dropdown-${index}`)
                                        if(container.classList.length === 1){
                                            container.classList.add(styles.showDropdown)
                                            document.addEventListener('mouseup', mouseUpHandle)
                                        } else {
                                            container.classList.remove(styles.showDropdown)
                                        }
                                    }
                                    const changeAmountHandle = (e) => {
                                        const container = document.getElementById(`cart-item-dropdown-${index}`)
                                        container.classList.remove(styles.showDropdown)
                                        document.removeEventListener('mouseup', mouseUpHandle)
                                        var newValue = e.target.getAttribute('data-value')
                                        editCartHandle(element.productId, newValue)
                                    }
                                    return (
                                        <div key={`cart-item-${index}`} className={styles.item}>
                                            <div className={styles.imageContainer}>
                                                <div className={styles.image}>
                                                    <Image src={element.img[0]} alt='img' layout='fill' objectFit='cover' />
                                                </div>
                                            </div>
                                            <div className={styles.detailGroup}>
                                                <div className={styles.details}>
                                                    <Link href={`/series/${element.seriesId}/${element.url}`}>
                                                        <a className={styles.title}>{element.title} {element.bookNum}</a>
                                                    </Link>
                                                    <div className={styles.category}>{element.category}</div>
                                                    <div className={styles.price}>{priceSum} {currency}</div>
                                                </div>
                                                <div className={styles.right}>
                                                    <div id={`cart-item-dropdown-${index}`} className={`${styles.dropdownGroup}`}>
                                                        <div className={styles.dropdownSelection} onClick={e => showDropdownHandle(e)}><div id={`select-amount-${index}`}>{cart[index].amount}</div> <RiArrowDownSLine/></div>
                                                        <div className={styles.dropdownList} onClick={e => changeAmountHandle(e)}>
                                                            { amount.map((element, index) => <div key={`amount-${index}`} className={styles.dropdownItem} data-value={element}>{element}</div> ) }
                                                        </div>
                                                    </div>
                                                    <div className={styles.remove} onClick={e => removeItemInCart(element.productId)}><CgClose /></div>
                                                </div>
                                            </div>
                                        </div>
                                    )
                                })
                            }
                        </div>
                    </div>
                    <div className={styles.checkOutSection}>
                        <div className={styles.subSection}>
                            <div>แสดงราคา</div>
                            <div className={styles.optionGroup}>
                                <div className={`${styles.option} ${currency==='บาท'? styles.select:''}`} onClick={e => changeCurrencyHandle('บาท')}>
                                    บาท
                                </div>
                                <div className={`${styles.option} ${currency==='BUSD'? styles.select:''}`} onClick={e => changeCurrencyHandle('BUSD')}>
                                    BUSD
                                </div>
                            </div>
                            <div className={styles.row}>
                                <div>ราคา</div>
                                <div>{priceSummary} {currency}</div>
                            </div>
                            <div className={styles.row}>
                                <div>ค่าจัดส่ง</div>
                                <div>{ Math.round(40/exchange_rate * 100)/100 } {currency}</div>
                            </div>
                            <div className={styles.row}>
                                <div>ราคารวม</div>
                                <div>{ Math.round((priceSummary + 40/exchange_rate) *100)/100 } {currency}</div>
                            </div>
                            <div className={styles.row}>
                                <Link href='/checkout'><div className={styles.btn}>Checkout</div></Link>
                            </div>
                        </div>
                    </div>
                </main>
                <footer className={styles.footer}>

                </footer>
            </div>
        </div>
    )
}